<?phpuse pronata\Controller\AuthController;use pronata\Controller\ItemController;use pronata\Controller\ListController;use pronata\Controller\ShareController;use pronata\Request;ini_set("display_errors", 1);ini_set('display_startup_errors', 1);error_reporting(E_ALL);ini_set("log_errors", 1);require_once dirname(__DIR__).'/vendor/autoload.php';// Allow from any originif (isset($_SERVER['HTTP_ORIGIN'])) {    $httpOrigin = strip_tags($_SERVER['HTTP_ORIGIN']);    header("Access-Control-Allow-Origin: {$httpOrigin}");    header('Access-Control-Allow-Credentials: true');    header('Access-Control-Max-Age: 86400');    // cache for 1 day    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))        // may also be using PATCH, DELETE        header("Access-Control-Allow-Methods: GET, POST, PATCH, DELETE");    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))        header("Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}");        //header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');    if ('OPTIONS' == $_SERVER['REQUEST_METHOD']) {        http_response_code(200);        exit;    }}try {    $objectMap = array(        'lists' => new ListController(),        'shares' => new ShareController(),        'items' => new ItemController(),        'auth' => new AuthController()    );    $request = new Request();    // Getting the first part of uri after slash.    if (array_key_exists($request->getObjectUriPart(), $objectMap)) {        // If this first part matching one from $objectMap, creating the associated Controller object        $object = $objectMap[$request->getObjectUriPart()];        // If it the request for authorization/authentication, getting the token through appropriate method        if ($request->getObjectUriPart() == 'auth') {            if ($request->getHttpMethod() == 'POST') {                if ($request->getIdUriPart() == 'token') {                    $object->getTokenAction($request);                    exit;                }            }        }        /**         * Each request to api, besides auth request, should contain the bearer jwt token         */        $authJwtToken = $request->getBearerToken();        $jwtValidator = new \pronata\Security\JwtValidator();        // Get the user from jwt payload        $user = $jwtValidator->getUserFromJwtPayload($authJwtToken);        $request->setUser($user);        /**         * Request of the Controller object method depending on the http method         */        switch ($request->getHttpMethod()) {            case 'POST':                $object->postAction($request);                break;            case 'GET':                $object->getAction($request);                break;            case 'DELETE':                $object->deleteAction($request);                break;            case 'PATCH':                $object->patchAction($request);                break;            case 'PUT':                $object->putAction($request);                break;            default:                throw new \Exception('Unsupported http method ' . $request->getHttpMethod());        }    }    else { //if the uri first part after slash doesn't match any from $objectMap, sending the error response        $response = new \pronata\Response();        $response->setContent(['message' => 'Uri not found']);        $response->setStatusCode(404);        $response->send();    }}catch (\pronata\Error\InvalidParamsException $e) {    $response = new \pronata\Response();    $response->setContent(['message' => $e->getMessage()]);    $response->setStatusCode(400);    $response->send();}catch (\Exception $e) {    $response = new \pronata\Response();    $response->setContent(['message' => $e->getMessage()]);    $response->setStatusCode(400);    $response->send();}